/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.16.5.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { Addr, InstantiateMsg, ExecuteMsg, QueryMsg, MigrateMsg, GetLockResponse } from "./OsmosisLock.types";
export interface OsmosisLockReadOnlyInterface {
  contractAddress: string;
  getLocks: () => Promise<GetLockResponse>;
}
export class OsmosisLockQueryClient implements OsmosisLockReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.getLocks = this.getLocks.bind(this);
  }

  getLocks = async (): Promise<GetLockResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_locks: {}
    });
  };
}
export interface OsmosisLockInterface extends OsmosisLockReadOnlyInterface {
  contractAddress: string;
  sender: string;
  lock: ({
    duration
  }: {
    duration: number;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  unlock: ({
    lockId
  }: {
    lockId: number;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  withdraw: ({
    amount,
    denom
  }: {
    amount: string;
    denom: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export class OsmosisLockClient extends OsmosisLockQueryClient implements OsmosisLockInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.lock = this.lock.bind(this);
    this.unlock = this.unlock.bind(this);
    this.withdraw = this.withdraw.bind(this);
  }

  lock = async ({
    duration
  }: {
    duration: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      lock: {
        duration
      }
    }, fee, memo, funds);
  };
  unlock = async ({
    lockId
  }: {
    lockId: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      unlock: {
        lock_id: lockId
      }
    }, fee, memo, funds);
  };
  withdraw = async ({
    amount,
    denom
  }: {
    amount: string;
    denom: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      withdraw: {
        amount,
        denom
      }
    }, fee, memo, funds);
  };
}