{"version":3,"file":"index.umd.min.js","sources":["../src/contracts/index.ts","../src/contracts/OsmosisLock.client.ts"],"sourcesContent":["/**\n* This file was automatically generated by @cosmwasm/ts-codegen@0.16.5.\n* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,\n* and run the @cosmwasm/ts-codegen generate command to regenerate this file.\n*/\n\nimport * as _0 from \"./OsmosisLock.types\";\nimport * as _1 from \"./OsmosisLock.client\";\nexport namespace contracts {\n  export const OsmosisLock = { ..._0,\n    ..._1\n  };\n}","/**\n* This file was automatically generated by @cosmwasm/ts-codegen@0.16.5.\n* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,\n* and run the @cosmwasm/ts-codegen generate command to regenerate this file.\n*/\n\nimport { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from \"@cosmjs/cosmwasm-stargate\";\nimport { Coin, StdFee } from \"@cosmjs/amino\";\nimport { Addr, InstantiateMsg, ExecuteMsg, QueryMsg, MigrateMsg, GetLockResponse } from \"./OsmosisLock.types\";\nexport interface OsmosisLockReadOnlyInterface {\n  contractAddress: string;\n  getLocks: () => Promise<GetLockResponse>;\n}\nexport class OsmosisLockQueryClient implements OsmosisLockReadOnlyInterface {\n  client: CosmWasmClient;\n  contractAddress: string;\n\n  constructor(client: CosmWasmClient, contractAddress: string) {\n    this.client = client;\n    this.contractAddress = contractAddress;\n    this.getLocks = this.getLocks.bind(this);\n  }\n\n  getLocks = async (): Promise<GetLockResponse> => {\n    return this.client.queryContractSmart(this.contractAddress, {\n      get_locks: {}\n    });\n  };\n}\nexport interface OsmosisLockInterface extends OsmosisLockReadOnlyInterface {\n  contractAddress: string;\n  sender: string;\n  lock: ({\n    duration\n  }: {\n    duration: number;\n  }, fee?: number | StdFee | \"auto\", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;\n  unlock: ({\n    lockId\n  }: {\n    lockId: number;\n  }, fee?: number | StdFee | \"auto\", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;\n  withdraw: ({\n    amount,\n    denom\n  }: {\n    amount: string;\n    denom: string;\n  }, fee?: number | StdFee | \"auto\", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;\n}\nexport class OsmosisLockClient extends OsmosisLockQueryClient implements OsmosisLockInterface {\n  client: SigningCosmWasmClient;\n  sender: string;\n  contractAddress: string;\n\n  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {\n    super(client, contractAddress);\n    this.client = client;\n    this.sender = sender;\n    this.contractAddress = contractAddress;\n    this.lock = this.lock.bind(this);\n    this.unlock = this.unlock.bind(this);\n    this.withdraw = this.withdraw.bind(this);\n  }\n\n  lock = async ({\n    duration\n  }: {\n    duration: number;\n  }, fee: number | StdFee | \"auto\" = \"auto\", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {\n    return await this.client.execute(this.sender, this.contractAddress, {\n      lock: {\n        duration\n      }\n    }, fee, memo, funds);\n  };\n  unlock = async ({\n    lockId\n  }: {\n    lockId: number;\n  }, fee: number | StdFee | \"auto\" = \"auto\", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {\n    return await this.client.execute(this.sender, this.contractAddress, {\n      unlock: {\n        lock_id: lockId\n      }\n    }, fee, memo, funds);\n  };\n  withdraw = async ({\n    amount,\n    denom\n  }: {\n    amount: string;\n    denom: string;\n  }, fee: number | StdFee | \"auto\" = \"auto\", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {\n    return await this.client.execute(this.sender, this.contractAddress, {\n      withdraw: {\n        amount,\n        denom\n      }\n    }, fee, memo, funds);\n  };\n}"],"names":["contracts","OsmosisLockQueryClient","client","contractAddress","_this","this","getLocks","__awaiter","queryContractSmart","get_locks","bind","OsmosisLockClient","_super","sender","call","lock","_a","fee","memo","funds","duration","execute","_b","unlock","lockId","lock_id","withdraw","amount","denom","__extends","OsmosisLock","__assign","_0","_1"],"mappings":";;;;;6/DAQiBA,oCCKjBC,EAIE,SAAYC,EAAwBC,GAApC,IAICC,EAAAC,KAEDA,KAAAC,SAAW,WAAA,OAAAC,EAAAH,OAAA,OAAA,GAAA,sCACT,MAAO,CAAA,EAAAC,KAAKH,OAAOM,mBAAmBH,KAAKF,gBAAiB,CAC1DM,UAAW,CAAE,YAPfJ,KAAKH,OAASA,EACdG,KAAKF,gBAAkBA,EACvBE,KAAKC,SAAWD,KAAKC,SAASI,KAAKL,KACpC,EA6BHM,EAAA,SAAAC,GAKE,SAAAD,EAAYT,EAA+BW,EAAgBV,GAA3D,IAAAC,EACEQ,EAAME,KAAAT,KAAAH,EAAQC,IAOfE,YAEDD,EAAIW,KAAG,SAAOC,EAIXC,EAAwCC,EAAeC,GAHxD,IAAAC,EAAQJ,EAAAI,qBAGP,IAAAH,IAAAA,EAAsC,iFAChC,KAAA,EAAA,MAAA,CAAA,EAAMZ,KAAKH,OAAOmB,QAAQhB,KAAKQ,OAAQR,KAAKF,gBAAiB,CAClEY,KAAM,CACJK,SAAQA,IAETH,EAAKC,EAAMC,IAJd,KAAA,EAAA,MAAA,CAAA,EAAOG,kBAMTlB,EAAMmB,OAAG,SAAOP,EAIbC,EAAwCC,EAAeC,GAHxD,IAAAK,EAAMR,EAAAQ,mBAGL,IAAAP,IAAAA,EAAsC,iFAChC,KAAA,EAAA,MAAA,CAAA,EAAMZ,KAAKH,OAAOmB,QAAQhB,KAAKQ,OAAQR,KAAKF,gBAAiB,CAClEoB,OAAQ,CACNE,QAASD,IAEVP,EAAKC,EAAMC,IAJd,KAAA,EAAA,MAAA,CAAA,EAAOG,kBAMTlB,EAAQsB,SAAG,SAAOV,EAMfC,EAAwCC,EAAeC,OALxDQ,EAAMX,EAAAW,OACNC,EAAKZ,EAAAY,kBAIJ,IAAAX,IAAAA,EAAsC,iFAChC,KAAA,EAAA,MAAA,CAAA,EAAMZ,KAAKH,OAAOmB,QAAQhB,KAAKQ,OAAQR,KAAKF,gBAAiB,CAClEuB,SAAU,CACRC,OAAMA,EACNC,MAAKA,IAENX,EAAKC,EAAMC,IALd,KAAA,EAAA,MAAA,CAAA,EAAOG,kBArCPlB,EAAKF,OAASA,EACdE,EAAKS,OAASA,EACdT,EAAKD,gBAAkBA,EACvBC,EAAKW,KAAOX,EAAKW,KAAKL,KAAKN,GAC3BA,EAAKmB,OAASnB,EAAKmB,OAAOb,KAAKN,GAC/BA,EAAKsB,SAAWtB,EAAKsB,SAAShB,KAAKN,IACpC,CAsCH,0PAnDuCyB,CAAsBlB,EAAAC,GAmD5DD,CAAD,CAnDA,CAAuCV,mFD1CvC,SAAiBD,GACFA,EAAA8B,YAAmBC,EAAAA,EAAA,CAAA,EAAAC,GAC3BC,EAEN,CAJD,CAAiBjC,IAAAA,EAIhB,CAAA"}